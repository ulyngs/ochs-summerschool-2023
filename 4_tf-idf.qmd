---
title: "Tf-idf"
format: html
---

We once again begins with reading in the libraries we'll need.

## Loading the libraries we need

```{r, include=FALSE}
library(tidyverse)
library(tidytext)
library(readxl)
```


## Read in the text

 We'll compare the Svacchanda-Tantra, the netratantra, and the hathapradipika.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(gutenbergr)
library(tidyverse)
library(tidytext)
```

# Load texts
For this, we'll use three different texts. 

I've downloaded from the Gutenberg project, English translations of the mahabharata, the ramayan, and the upanishads. Let's read them in:

```{r cars}
hindu_texts <- read_csv("data/gutenberg_hindu.csv")
```

Let's have a look:

```{r}
hindu_texts
```


So we've got English translations here of the mahabharata, the ramayan, and the upanishads.
Each of them are read in line by line - the upanishads are short (2,611 lines) compared to the others.

We can split them up into single words using the function `unnest_tokens` and `count` how many times each word is used in each text.

```{r}
hindu_texts_word_counts <- hindu_texts %>%
  unnest_tokens(word, text) %>%
  count(short_title, word, sort = TRUE)

```

These are just the raw counts, but the texts aren't equally long.

Let's add term frequencies, i.e., the number of times a word occurs divided by the number of words in a text, as well as tf-idf, using the `bind_tf_idf` function, and sort by the term frequencies

```{r}
hindu_texts_tf_idf <- hindu_texts_word_counts %>% 
  bind_tf_idf(word, short_title, n) %>% 
  arrange(desc(tf))

hindu_texts_tf_idf
```

Let's now calculate and plot tf-idf.

```{r}
hindu_texts_tf_idf %>% 
  mutate(word = fct_reorder(word, tf_idf)) %>% 
  group_by(short_title) %>% 
  top_n(15, tf_idf) %>% 
  ungroup() %>%
  mutate(word = reorder(word, tf_idf)) %>%
  ggplot(aes(word, tf_idf, fill = short_title)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = "tf-idf") +
  facet_wrap(~short_title, scales = "free") +
  coord_flip() +
  theme_minimal()


ggsave("tf_idf_hindu_texts_gutenberg.png", width = 9, height = 5)
```

Very interesting!

## Bigrams

```{r}
hindu_texts_bigrams <- hindu_texts %>%
  unnest_tokens(bigram, text, token = "ngrams", n = 2)
  
hindu_texts_bigrams
```

let's count and filter them

```{r}
bigrams_separated <- hindu_texts_bigrams %>%
  separate(bigram, c("word1", "word2"), sep = " ")

bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word)

bigram_counts <- bigrams_filtered %>% 
  count(word1, word2, sort = TRUE)

bigram_counts
```

```{r}
bigrams_united <- bigrams_filtered %>%
  unite(bigram, word1, word2, sep = " ")

bigrams_united
```


```{r}
bigram_tf_idf <- bigrams_united %>%
  count(short_title, bigram) %>%
  bind_tf_idf(bigram, short_title, n) %>%
  arrange(desc(tf_idf))

bigram_tf_idf
```

```{r}
long_data <- bigram_tf_idf %>% 
  mutate(bigram = fct_reorder(bigram, tf_idf))

long_data %>% 
  group_by(short_title) %>% 
  arrange(desc(tf_idf)) %>% 
  slice(1:20) %>% 
  ungroup() %>%
  mutate(word = reorder(bigram, tf_idf)) %>%
  ggplot(aes(reorder(bigram, tf_idf), tf_idf, fill = short_title)) +
    geom_col(show.legend = FALSE) +
    labs(x = NULL, y = "tf-idf") +
    facet_wrap(~short_title, scales = "free") +
    coord_flip() +
    theme_minimal()
```





