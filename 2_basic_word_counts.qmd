---
title: "Basic text mining"
format: html
---

# Basic text mining! Yay!

We once again begins with reading in the libraries we'll need.

## Loading the libraries we need

```{r, include=FALSE}
library(tidyverse)
library(tidytext)
library(readxl)
library(wordcloud2)
```

Let's load in the text we just saved out: our cleaned, excel-version of the Svacchanda-Tantra we downloaded from GÃ¶ttingen Register of Electronic Texts in Indian Languages ([GRETIL](https://gretil.sub.uni-goettingen.de/gretil.html)).


## Read in the text

```{r}
text_data = read_excel("data/gretil_example.xlsx")
```

## Word counts
### Split text up into single words
We use the `unnest_tokens` 

```{r}
text_words <- text_data |> 
 unnest_tokens(word, value)
```

Let's have a look!

```{r}
text_words
```
### Count words
Let's count them using the... surprise... `count` function!

We'll tell the function to sort the words by number

```{r}
word_counts <- text_words |> 
  count(word, sort = TRUE)
```

Let's have a look:

```{r}
word_counts
```

### Visualise it

Let's show the top 30 words in a bar chart.

We

- use `slice(1:30)` to take the first 30 rows
- use `ggplot()` to create an empty plot
- use `geom_col` to add a bar chart layer to the plot, and the `aes` function to tell it what to show on the x and the y axes

```{r}
word_counts |> 
  slice(1:30) |> 
  ggplot() +
    geom_col(aes(x = word, n))
```

Let's order it by the word count, and flip it on its side:

```{r}
word_counts |> 
  slice(1:30) |> 
  ggplot() +
    geom_col(aes(x = reorder(word,n), n)) +
    coord_flip()
```


Yay!

### Exclude words we don't care about

So we see words like 'tu', 'ca', etc. come out on top. We don't actually care about those. Let's exclude them using `filter`

- `%in%` select things that are within a certain list
- `c()` creates a list of things -- in this case of words
- `!` means 'not', so we're filtering to rows where the entry in the word column is *not* tu, ca, na, te, or sa

```{r}
relevant_word_counts <- word_counts |> 
  filter(!word %in% c("tu", "ca", "na", "te", "sa"))
```

Let's have a look

```{r}
relevant_word_counts
```

Much better!!

### Visualise again as a bar chart
Let's visualise it again:

```{r}
relevant_word_counts |> 
  slice(1:30) |> 
  ggplot() +
    geom_col(aes(x = reorder(word,n), n)) +
    coord_flip()
```

Wiii!!

### Visualise as a word cloud
Finally, let's visualise this as a word cloud instead of as a bar chart

```{r}
relevant_word_counts |> 
  wordcloud2()
```
